<?php
declare(strict_types=1);

namespace Medvids\CustomChat\Controller\Collection;

use Magento\Framework\Controller\ResultFactory;
use Magento\Framework\Exception\LocalizedException;

class Messages extends \Magento\Framework\App\Action\Action implements
    \Magento\Framework\App\Action\HttpGetActionInterface
{
    public const ROW_PER_PAGE = 10;

    /**
     * @var \Medvids\CustomChat\Model\ResourceModel\CustomChat\CollectionFactory $collectionFactory
     */
    private $collectionFactory;

    /**
     * @var \Magento\Store\Model\StoreManagerInterface $storeManager
     */
    private $storeManager;

    /**
     * @var \Psr\Log\LoggerInterface $logger
     */
    private $logger;

    /**
     * @var \Magento\Framework\Stdlib\DateTime\TimezoneInterface $timezone
     */
    private $timezone;

    /**
     * @var \Magento\Customer\Model\Session $customerSession
     */
    private $customerSession;

    /**
     * @var \Magento\Framework\DB\TransactionFactory $transactionFactory
     */
    private $transactionFactory;

    /**
     * Messages constructor.
     * @param \Medvids\CustomChat\Model\ResourceModel\CustomChat\CollectionFactory $collectionFactory
     * @param \Magento\Store\Model\StoreManagerInterface $storeManager
     * @param \Magento\Framework\Stdlib\DateTime\TimezoneInterface $timezone
     * @param \Psr\Log\LoggerInterface $logger
     * @param \Magento\Customer\Model\Session $customerSession
     * @param \Magento\Framework\DB\TransactionFactory $transactionFactory
     * @param \Magento\Framework\App\Action\Context $context
     */
    public function __construct(
        \Medvids\CustomChat\Model\ResourceModel\CustomChat\CollectionFactory $collectionFactory,
        \Magento\Store\Model\StoreManagerInterface $storeManager,
        \Magento\Framework\Stdlib\DateTime\TimezoneInterface $timezone,
        \Psr\Log\LoggerInterface $logger,
        \Magento\Customer\Model\Session $customerSession,
        \Magento\Framework\DB\TransactionFactory $transactionFactory,
        \Magento\Framework\App\Action\Context $context
    ) {
        parent::__construct($context);
        $this->collectionFactory = $collectionFactory;
        $this->storeManager = $storeManager;
        $this->logger = $logger;
        $this->timezone = $timezone;
        $this->customerSession = $customerSession;
        $this->transactionFactory = $transactionFactory;
    }

    /**
     * @inheritDoc
     * @throws \Exception
     */
    public function execute()
    {
        $messages = [];

        try {
            if ($chatHash = $this->customerSession->getData('chat_hash')) {
                if ($this->customerSession->isLoggedIn()) {
                    $customer = $this->customerSession->getCustomerData();

                    if (!array_key_exists('user_hash', $chatHash)) {
                        /** @var string $customerChatHash getting user last message hash  */
                        $chatHash['user_hash'] = $this->collectionFactory->create()
                                ->addFieldToFilter('author_id', $customer->getId())
                                ->addFieldToFilter('author_type', 'user')
                                ->setPageSize(1)
                                ->getFirstItem()
                                ->getData('chat_hash')
                            ?? uniqid('chat_', true);
                    }

                    if (array_key_exists('guest_hash', $chatHash)) {
                        $guestMessageCollection = $this->collectionFactory->create();

                        /** @var \Magento\Framework\DB\Transaction $transaction */
                        $transaction = $this->transactionFactory->create();
                        $guestMessages = $guestMessageCollection
                            ->addFieldToFilter('chat_hash', $chatHash['guest_hash'])
                            ->addFieldToFilter('author_type', 'user');

                        /** @var \Medvids\CustomChat\Model\CustomChat $guestMessage */
                        foreach ($guestMessages as $guestMessage) {
                            $message = $guestMessage->setChatHash($chatHash['user_hash'])
                                ->setAuthorName($customer->getFirstname() . ' ' . $customer->getLastname())
                                ->setAuthorId($customer->getId());
                            $transaction->addObject($message);
                        }
                        $transaction->save();

                        unset($chatHash['guest_hash']);
                    }
                }

                $this->customerSession->setChatHash($chatHash);

                $messageCollection = $this->collectionFactory->create();

                $messageCollection->addFieldToFilter(
                    'website_id',
                    $this->storeManager->getWebsite()->getId()
                );
                $messageCollection->addFieldToFilter(
                    'chat_hash',
                    $chatHash['guest_hash'] ?? $chatHash['user_hash']
                );

                if ($messageCollection->getSize() > self::ROW_PER_PAGE) {
                    $messageCollection->getSelect()
                        ->limit(self::ROW_PER_PAGE, $messageCollection->getSize() - self::ROW_PER_PAGE);
                }

                /** @var \Medvids\CustomChat\Model\CustomChat $message */
                foreach ($messageCollection as $key => $message) {
                    $messages[] = [
                        'authorType' => $message->getAuthorType(),
                        'message' => $message->getMessage(),
                        'createdAt' => $this->timezone->date($message->getCreatedAt())->format('H:i')
                    ];
                }
            } else {
                $messages[] = [
                    'authorType' => 'admin',
                    'message' => __('How may I help you?')
                ];
            }
        } catch (LocalizedException $e) {
            $this->logger->error($e->getMessage());
            $messages[] = [
                'authorType' => 'admin',
                'message' => __('How may I help you?')
            ];
        }

        $data = ['messages' => $messages];
        $controllerResult = $this->resultFactory->create(ResultFactory::TYPE_JSON);

        return $controllerResult->setData($data);
    }
}
